import 'package:flutter/material.dart';
import 'package:provider/provider.dart';

void main() {
  runApp(
    ChangeNotifierProvider(
      create: (_) => ThemeProvider(),
      child: MyApp(),
    ),
  );
}

class ThemeProvider with ChangeNotifier {
  bool _isDarkMode = false;

  bool get isDarkMode => _isDarkMode;

  void toggleTheme() {
    _isDarkMode = !_isDarkMode;
    notifyListeners();
  }
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    final themeProvider = Provider.of<ThemeProvider>(context);
    return MaterialApp(
      theme: themeProvider.isDarkMode ? ThemeData.dark() : ThemeData.light(),
      home: Scaffold(
        backgroundColor: themeProvider.isDarkMode ? Colors.grey[900] : Colors.grey[200],
        appBar: AppBar(
          title: Text('5 квадратов с тенями'),
          actions: [
            Switch(
              value: themeProvider.isDarkMode,
              onChanged: (value) {
                themeProvider.toggleTheme();
              },
            ),
          ],
        ),
        body: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Column(
            mainAxisAlignment: MainAxisAlignment.spaceEvenly,
            children: [
              // Бокс 1: M3-Shadows/1
              _buildShadowBox(
                ambientShadow: BoxShadow(
                  color: Colors.black.withOpacity(0.08), // 8%
                  offset: Offset(0, 1),
                  blurRadius: 2,
                  spreadRadius: 0,
                ),
                keyShadow: BoxShadow(
                  color: Colors.black.withOpacity(0.12), // 12%
                  offset: Offset(0, 1),
                  blurRadius: 3,
                  spreadRadius: 1,
                ),
                shadowLevel: 1,
                isDarkMode: themeProvider.isDarkMode,
              ),

              // Бокс 2: M3-Shadows/2
              _buildShadowBox(
                ambientShadow: BoxShadow(
                  color: Colors.black.withOpacity(0.08), // 8%
                  offset: Offset(0, 1),
                  blurRadius: 2,
                  spreadRadius: 0,
                ),
                keyShadow: BoxShadow(
                  color: Colors.black.withOpacity(0.12), // 12%
                  offset: Offset(0, 2),
                  blurRadius: 6,
                  spreadRadius: 2,
                ),
                shadowLevel: 2,
                isDarkMode: themeProvider.isDarkMode,
              ),

              // Бокс 3: M3-Shadows/3
              _buildShadowBox(
                ambientShadow: BoxShadow(
                  color: Colors.black.withOpacity(0.08), // 8%
                  offset: Offset(0, 1),
                  blurRadius: 3,
                  spreadRadius: 0,
                ),
                keyShadow: BoxShadow(
                  color: Colors.black.withOpacity(0.12), // 12%
                  offset: Offset(0, 4),
                  blurRadius: 8,
                  spreadRadius: 3,
                ),
                shadowLevel: 3,
                isDarkMode: themeProvider.isDarkMode,
              ),

              // Бокс 4: M3-Shadows/4
              _buildShadowBox(
                ambientShadow: BoxShadow(
                  color: Colors.black.withOpacity(0.08), // 8%
                  offset: Offset(0, 2),
                  blurRadius: 3,
                  spreadRadius: 0,
                ),
                keyShadow: BoxShadow(
                  color: Colors.black.withOpacity(0.12), // 12%
                  offset: Offset(0, 6),
                  blurRadius: 10,
                  spreadRadius: 4,
                ),
                shadowLevel: 4,
                isDarkMode: themeProvider.isDarkMode,
              ),

              // Бокс 5: M3-Shadows/5
              _buildShadowBox(
                ambientShadow: BoxShadow(
                  color: Colors.black.withOpacity(0.08), // 8%
                  offset: Offset(0, 4),
                  blurRadius: 4,
                  spreadRadius: 0,
                ),
                keyShadow: BoxShadow(
                  color: Colors.black.withOpacity(0.12), // 12%
                  offset: Offset(0, 8),
                  blurRadius: 12,
                  spreadRadius: 6,
                ),
                shadowLevel: 5,
                isDarkMode: themeProvider.isDarkMode,
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildShadowBox({
    required BoxShadow ambientShadow,
    required BoxShadow keyShadow,
    required int shadowLevel,
    required bool isDarkMode,
  }) {
    return Container(
      width: 150, // Фиксированная ширина
      height: 150, // Фиксированная высота (квадрат)
      decoration: BoxDecoration(
        color: isDarkMode ? Colors.grey[800] : Colors.white, // Фон контейнера
        borderRadius: BorderRadius.circular(24),
        boxShadow: [ambientShadow, keyShadow],
      ),
      child: Center(
        child: Text(
          'Тень $shadowLevel', // Текст внутри контейнера
          style: TextStyle(
            fontSize: 16,
            fontWeight: FontWeight.bold,
            color: isDarkMode ? Colors.white : Colors.black, // Цвет текста
          ),
        ),
      ),
    );
  }
}
